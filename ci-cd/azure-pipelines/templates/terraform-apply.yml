###############################################################################################
# Template: Terraform Apply
# 
# Applies the Terraform plan to create/update infrastructure
###############################################################################################

parameters:
  - name: workingDirectory
    type: string
  - name: azureServiceConnection
    type: string

steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download Terraform Plan'
    inputs:
      buildType: 'current'
      artifactName: 'tfplan-$(environment)'
      targetPath: ${{ parameters.workingDirectory }}

  - task: AzureCLI@2
    displayName: 'Terraform Apply'
    inputs:
      azureSubscription: ${{ parameters.azureServiceConnection }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      workingDirectory: ${{ parameters.workingDirectory }}
      inlineScript: |
        echo "Applying Terraform changes..."
        terraform apply -input=false tfplan
        echo "Terraform apply completed successfully"

  - task: AzureCLI@2
    displayName: 'Capture Outputs'
    inputs:
      azureSubscription: ${{ parameters.azureServiceConnection }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      workingDirectory: ${{ parameters.workingDirectory }}
      inlineScript: |
        echo "Capturing Terraform outputs..."
        terraform output -json > outputs.json
        cat outputs.json
        
        # Export key outputs as pipeline variables
        if terraform output acr_name &>/dev/null; then
          ACR_NAME=$(terraform output -raw acr_name)
          echo "##vso[task.setvariable variable=acrName;isOutput=true]$ACR_NAME"
          echo "ACR Name: $ACR_NAME"
        fi
        
        if terraform output acr_login_server &>/dev/null; then
          ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)
          echo "##vso[task.setvariable variable=acrLoginServer;isOutput=true]$ACR_LOGIN_SERVER"
          echo "ACR Login Server: $ACR_LOGIN_SERVER"
        fi
        
        if terraform output application_gateway_public_ip &>/dev/null; then
          APPGW_IP=$(terraform output -raw application_gateway_public_ip)
          echo "##vso[task.setvariable variable=appGwPublicIp;isOutput=true]$APPGW_IP"
          echo "App Gateway Public IP: $APPGW_IP"
        fi
    name: terraformOutputs

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Terraform Outputs'
    inputs:
      targetPath: '${{ parameters.workingDirectory }}/outputs.json'
      artifact: 'terraform-outputs-$(environment)'
      publishLocation: 'pipeline'
